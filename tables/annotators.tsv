Property name	Annotator class name	Generated Annotation	Description
[tokenize](tokenize.html)	TokenizerAnnotator	TokensAnnotation (list of tokens), and CharacterOffsetBeginAnnotation, CharacterOffsetEndAnnotation, TextAnnotation (for each token)	Tokenizes the text. This component started as a PTB-style tokenizer, but was extended since then to handle noisy and web text. The tokenizer saves the character offsets of each token in the input text, as CharacterOffsetBeginAnnotation and CharacterOffsetEndAnnotation.
[cleanxml](cleanxml.html)	CleanXmlAnnotator	XmlContextAnnotation	Remove xml tokens from the document
[ssplit](ssplit.html)	WordsToSentenceAnnotator	SentencesAnnotation	Splits a sequence of tokens into sentences.
[pos](pos.html)	POSTaggerAnnotator	PartOfSpeechAnnotation	Labels tokens with their POS tag. For more details see [this page](http://nlp.stanford.edu/software/tagger.shtml).
[lemma](lemma.html)	MorphaAnnotator	LemmaAnnotation	Generates the word lemmas for all tokens in the corpus.
[ner](ner.html)	NERClassifierCombiner	NamedEntityTagAnnotation and NormalizedNamedEntityTagAnnotation	Recognizes named (PERSON, LOCATION, ORGANIZATION, MISC), numerical (MONEY, NUMBER, ORDINAL, PERCENT), and temporal (DATE, TIME, DURATION, SET) entities. Named entities are recognized using a combination of three CRF sequence taggers trained on various corpora, such as ACE and MUC. Numerical entities are recognized using a rule-based system. Numerical entities that require normalization, e.g., dates, are normalized to NormalizedNamedEntityTagAnnotation. For more details on the CRF tagger see [this page](http://nlp.stanford.edu/software/CRF-NER.shtml).
[regexner](regexner.html)	RegexNERAnnotator	NamedEntityTagAnnotation	Implements a simple, rule-based NER over token sequences using Java regular expressions. The goal of this Annotator is to provide a simple framework to incorporate NE labels that are not annotated in traditional NL corpora. For example, the default list of regular expressions that we distribute in the models file recognizes ideologies (IDEOLOGY), nationalities (NATIONALITY), religions (RELIGION), and titles (TITLE). Here is [a simple example](http://nlp.stanford.edu/software/regexner/) of how to use RegexNER. For more complex applications, you might consider [TokensRegex](http://nlp.stanford.edu/software/tokensregex.shtml).
[sentiment](sentiment.html)	SentimentAnnotator	entimentCoreAnnotations.AnnotatedTree	Implements Socher et al's sentiment model.  Attaches a binarized tree of the sentence to the sentence level CoreMap.  The nodes of the tree then contain the annotations from RNNCoreAnnotations indicating the predicted class and scores for that subtree.  See the [sentiment page](http://nlp.stanford.edu/sentiment) for more information about this project.
[truecase](truecase.html)	TrueCaseAnnotator	TrueCaseAnnotation and TrueCaseTextAnnotation	Recognizes the true case of tokens in text where this information was lost, e.g., all upper case text. This is implemented with a discriminative model implemented using a CRF sequence tagger. The true case label, e.g., INIT_UPPER is saved in TrueCaseAnnotation. The token text adjusted to match its true case is saved as TrueCaseTextAnnotation.
[parse](parse.html)	ParserAnnotator	TreeAnnotation, BasicDependenciesAnnotation, CollapsedDependenciesAnnotation, CollapsedCCProcessedDependenciesAnnotation	Provides full syntactic analysis, using both the constituent and the dependency representations. The constituent-based output is saved in TreeAnnotation. We generate three dependency-based outputs, as follows: basic, uncollapsed dependencies, saved in BasicDependenciesAnnotation; collapsed dependencies saved in CollapsedDependenciesAnnotation; and collapsed dependencies with processed coordinations, in CollapsedCCProcessedDependenciesAnnotation. Most users of our parser will prefer the latter representation. For more details on the parser, please see [this page](http://nlp.stanford.edu/software/lex-parser.shtml). For more details about the dependencies, please refer to [this page](http://nlp.stanford.edu/software/stanford-dependencies.shtml).
[depparse](depparse.html)	DependencyParseAnnotator	BasicDependenciesAnnotation, CollapsedDependenciesAnnotation, CollapsedCCProcessedDependenciesAnnotation	Provides a fast syntactic dependency parser. We generate three dependency-based outputs, as follows: basic, uncollapsed dependencies, saved in BasicDependenciesAnnotation; collapsed dependencies saved in CollapsedDependenciesAnnotation; and collapsed dependencies with processed coordinations, in CollapsedCCProcessedDependenciesAnnotation. Most users of our parser will prefer the latter representation. For details about the dependency software, see [this page](http://nlp.stanford.edu/software/nndep.shtml). For more details about dependency parsing in general, see [this page](http://nlp.stanford.edu/software/stanford-dependencies.shtml).
[dcoref](dcoref.html)	DeterministicCorefAnnotator	CorefChainAnnotation	Implements both pronominal and nominal coreference resolution. The entire coreference graph (with head words of mentions as nodes) is saved in CorefChainAnnotation. For more details on the underlying coreference resolution algorithm, see [this page](http://nlp.stanford.edu/software/dcoref.shtml).
[relation](relation.html)	RelationExtractorAnnotator	MachineReadingAnnotations.RelationMentionsAnnotation	Stanford relation extractor is a Java implementation to find relations between two entities. The current relation extraction model is trained on the relation types (except the 'kill' relation) and data from the paper Roth and Yih, Global inference for entity and relation identification via a linear programming formulation, 2007, except instead of using the gold NER tags, we used the NER tags predicted by Stanford NER classifier to improve generalization. The default model predicts relations <tt>Live_In</tt>, <tt>Located_In</tt>, <tt>OrgBased_In</tt>, <tt>Work_For</tt>, and <tt>None</tt>. For more details of how to use and train your own model, see [this page](http://nlp.stanford.edu/software/relationExtractor.shtml).
[natlog](natlog.html)	NaturalLogicAnnotator	OperatorAnnotation, PolarityAnnotation	Marks quantifier scope and token polarity, according to natural logic semantics. Places an OperatorAnnotation on tokens which are quantifiers (or other natural logic operators), and a PolarityAnnotation on all tokens in the sentence.
[quote](quote.html)	QuoteAnnotator	QuotationAnnotation	Deterministically picks out quotes delimited by " or ' from a text. All top-level quotes, are supplied by the top level annotation for a text. If a QuotationAnnotation corresponds to a quote that contains embedded quotes, these quotes will appear as embedded QuotationAnnotations that can be accessed from the QuotationAnnotation that they are embedded in. The QuoteAnnotator can handle multi-line and cross-paragraph quotes, but any embedded quotes must be delimited by a different kind of quotation mark than its parents. Does not depend on any other annotators. Support for unicode quotes is not yet present.
[quoteattribution](quoteattribution.html) QuoteAttributionAnnotator MentionAnnotation, MentionBeginAnnotation, MentionEndAnnotation, MentionTypeAnnotation, MentionSieveAnnotation, SpeakerAnnotation, SpeakerSieveAnnotation, ParagraphIndexAnnotation Attributes quotes to their speakers in a text, linking them to both a mention in the text and a speaker entity.
[entitymentions](entitymentions.html)	EntityMentionsAnnotator	MentionsAnnotation	Provides a list of the mentions identified by NER (including their spans, NER tag, normalized value, and time). As an instance, "New York City" will be identified as one mention spanning three tokens.
